#!/bin/bash

# lxcctl - tests x2dhf support for the Libxc functionals 

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2023 Jacek Kobus 

function help {

    cat <<EOF |less -r

${bold}NAME${normal}
       lxcctl - tests x2dhf support for the Libxc functionals 

${bold}SYNOPSIS${normal}
       lxcctl help|-h|--help

       lxcctl -s be|fh hf
       lxcctl -s be|fh  dft xc_func

       lxcctl -s be|fh  xc_func1 [ xc_func2 [ xc_func3 [ ... ] ] ] 
       lxcctl -s be|fh  all|lda|lda_x|gga|gga_c|gga_x|hyb_lda|hyb_gga|...

       lxcctl info xc_func

       lxcctl list

       lxcctl -s be|fh clean|cleanall


${bold}OPTIONS${normal}
       -f  
           Forces solving HF equations afresh, i.e. the calculations overwrite 
           any earlier generated orbital and potential files.

       -h   
           Shows this help.

       -n <maxscf>
           Changes maxscf parameter from its default value of 2000 (see SCF 
           input card of the x2dhf program).            

       -s be|fh 
           Selects the system for calculations; if omitted, the Be system 
           is selected.

       -v
           Verbose mode.


${bold}USAGE EXAMPLES${normal}
       lxcctl -s be|fh hf
           Runs the x2dhf program to generate HF orbitals and potentials for 
           the Be or FH system.

       lxcctl dft xc_func
           Starts x2dhf to performs DFT calculations for the selected functional 
           and the default Be system.

       lxcctl -s be|fh status|tail
           Shows the progress of the running program.

       lxcctl stop
           Stops the running program.

       lxcctl xc_func1 [ xc_func2 [ xc_func3 [ ... ] ] ] 
           Calculates energy contribution(s) for selected Libxc functional(s)
           employing the electron density of the Be system.

       lxcctl -s fh |lda|lda_x|gga|gga_c|gga_x|hyb_lda|hyb_gga|...
           Calculates energy contributions for specified subset of Libxc 
           functionals employing the FH electron density.

       lxcctl -s fh all
           Calculates energy contributions for all functionals defined in 
           include/xc_funcs.h employing the FH electron density.

       lxcctl list 
           Lists all the functionals from Libxc library that are supported 
           by x2dhf program.

       lxcctl info
           Outputs information from xc-info program about all supported 
           functionals (xc-info needs include/xc_funcs.h).

       lxcctl info xc_func
           Outputs information from xc-info program about xc_func functional. 

       lxcctl clean 
           Removes all the $system-lxc*.lst files.

       lxcctl cleanall 
           Removes all *.lst, *.dat, *.orb, *.coul and *.exch files from
           the current directory.

 
${bold}AUTHOR${normal}
       Jacek Kobus <jacek.kobus@umk.pl> 

${bold}COPYRIGHT${normal}
       SPDX-License-Identifier: GPL-2.0-or-later
       Copyright Â© 2023 Jacek Kobus
EOF
    exit
    
}

function genInputData {
    for (( i=1; i<=maxCards; i++ ))
    do
	[[ -n ${card[$i]} ]] && echo ${card[$i]} 
    done

}

function execLXCFunc {

    # In order to capture the error messages generated by libxc functions STDERR MUST be
    # handled separately (redirection >& does not work!)
    2>error-lxc.log xhf $system-lxc  $system-hf $system-1 > $system-lxc-$lxcFunc.lst

    status=$(grep -P 'Error! xc.+: no such libxc functional found' $system-lxc-$lxcFunc.lst)
    if [[ -n $status ]]
    then
	(LANG=en_US; printf "%-30s %-18s\n" $lxcFunc "no such libxc functional found")
	return 1
    fi

    status=$(grep -P 'Error! xc.+: unsupported libxc functional' $system-lxc-$lxcFunc.lst)
    if [[ -n $status ]]
    then
	(LANG=en_US; printf "%-30s %-18s\n" $lxcFunc "unsupported libxc functional")
	return 2
    fi

    status=$(grep -P 'Argument cannot be 0.0 in expint_e1' $system-lxc-$lxcFunc.lst)
    
    if [[ -n $status ]]
    then
	(LANG=en_US; printf "%-30s %-60s\n" $lxcFunc "$status") 
	return 3
    fi
    
    status=$(head -n1 error-lxc.log)
    if [[ $status =~ "does not provide an implementation of Exc" ]]
    then
    	(LANG=en_US; printf "%-30s %-60s\n" $lxcFunc "$status") 
    	return 4
    fi

    statusNaN=$(grep -P 'exchange\-correlation energy \(LXC\):\s+NaN' $system-lxc-$lxcFunc.lst)
    statusAst=$(grep -P 'exchange\-correlation energy \(LXC\):\s+\*\*\*' $system-lxc-$lxcFunc.lst)
    
    if [[ $statusNaN != "" ]]
    then
	(LANG=en_US; printf "%-30s %-30s\n" $lxcFunc NaN)
	exit 1
    fi
    
    if [[ $statusAst != "" ]]
    then
	(LANG=en_US; printf "%-30s %-30se\n" $lxcFunc '***')
	exit 1
    fi

    result=
    result=$(grep -P 'exchange\-correlation energy \(LXC\):\s+\-?\d+\.' $system-lxc-$lxcFunc.lst\
	| gawk -F: '{print $2}')

    if [[ -n $result ]]
    then
	(LANG=en_US; printf "%-30s %-+18.12e\n" $lxcFunc $result)
    else
	(LANG=en_US; printf "%-30s %-+18s\n" $lxcFunc $result)
    fi
    return 0
}

function prepInputData {
    
    if [[ $system == be ]]
    then
	card[1]="$title (HF)" 
	card[2]="method hf"
	card[3]="dft $lxcFunc"
	card[4]=$nuclei
	card[5]="config 0"
	card[6]="2 sigma  end"
	card[7]=$grid
	card[8]="orbpot old"
	card[9]="scf 0 10 7 14 3"
	card[10]=$omega
	card[11]=$fixnan
	card[12]=stop                    
	maxCards=12
	genInputData > $system-lxc.data
    fi

    if [[ $system == fh ]]
    then
	card[1]="$title (HF)" 
	card[2]="method hf"
	card[3]="dft $lxcFunc"
	card[4]=$nuclei
	card[5]="config 0"
	card[6]="1 pi"
	card[7]="3 sigma  end"
	card[8]=$grid
	card[9]="orbpot old"
	card[10]="scf 0 10 7 14 3"
	card[11]=$omega
	card[12]=$fixnan
	card[13]=stop                    
	maxCards=13
	genInputData > $system-lxc.data
    fi
}

bold=$(tput bold)
normal=$(tput sgr0)
prog=$(echo $0 | sed -e 's/\.\///')

[[ $1 == "help" || $1 == "-h" || $1 == "--help" ]] && help

n=50         # tail -$n 

cont=no
fixnan=
force=
interp=
maxscf=2000
system=be
verbose=

kinds="
lda 
gga
hyb\_lda
hyb\_gga
"


lxcFuncs4tests="
XC_LDA_XC_TIH 
XC_HYB_GGA_XC_HSE03 
XC_HYB_GGA_XC_HSE06 
XC_HYB_GGA_XC_HSE12 
XC_HYB_GGA_XC_HSE12S 
XC_GGA_X_WPBEH
XC_GGA_X_LBM
XC_GGA_X_LB
"    

lxcFuncs4SelTests="
XC_LDA_X    
XC_LDA_X_1D_SOFT   
XC_LDA_XC_TETER93 
XC_LDA_C_VWN     
XC_LDA_C_VWN_RPA 
XC_LDA_C_PW      
XC_LDA_C_PW_MOD  
XC_LDA_K_TF 
XC_GGA_C_GAM
XC_GGA_C_Q2D     
XC_GGA_K_TFVW          
XC_GGA_K_MEYER 
XC_GGA_X_GAM
XC_GGA_X_GG99        
XC_GGA_X_HCTH_A
XC_GGA_X_EV93
XC_GGA_X_PBE_MOL       
XC_GGA_XC_OBLYP_D 
XC_HYB_LDA_XC_LDA0
XC_HYB_GGA_X_N12_SX      
XC_HYB_GGA_XC_PBEB0     
"    




while getopts "fn:s:v" option; do
    case $option in
	f ) force=yes;;
        h ) help; exit;;
	n ) maxscf=$OPTARG;;
	s ) system=$OPTARG;;
	v ) verbose=yes;;
	* ) echo "Error: unknown option" && help && exit
    esac
done

shift $((OPTIND-1))

x2dhf=$(which x2dhf >& /dev/null)

if [[ ! -f x2dhf ]]
then
   if [[ -z $x2dhf && -f $X2DHF_DIRECTORY/bin/x2dhf ]]
   then
       ln $X2DHF_DIRECTORY/bin/x2dhf . 
   else
       echo "Error! x2dhf command not found neither via PATH nor in the current directory ... "
   fi
fi
   
case=$1

[[ -z $case ]] && help && exit 1

if [[ $system == be ]]
then
    system="be"
    title="title Be"
    nuclei="nuclei 4.0  0.0  2.386"
    grid="grid 169 35.0"
    omega=
elif [[ $system == fh ]]
then
    system="fh"    
    title="title FH"
    nuclei="nuclei 9.0  1.0  1.7328"
    #grid="grid 247 50.0"
    grid="grid 169 45.0"
    omega="omega 1.8 1.8"
else
    echo "Error: unknown system chosen; see lxcctl -h"
    exit
fi    

if [[ $case == "all" ]]
then
   echo -e "\n$(echo "${system^}"): contributions to total HF energy for DFT functionals:\n" 
   for kind in $kinds
   do
       lxcFuncs=$(grep -Pi "^#define\s+XC\_${kind}" $X2DHF_DIRECTORY/libxc/include/xc_funcs.h | gawk '{print $2}')
       # supported families of lxclib functionals: XC_FAMILY_LDA, XC_FAMILY_GGA, XC_FAMILY_HYB_GGA

    for lxcFunc in $lxcFuncs
    do
	prepInputData
	execLXCFunc
	returnCode=$?
	[[ $returnCode != 0 ]] && echo "execLXCFunc: returnCode=$returnCode"
    done
   done
fi

if [[ $case == "clean" ]]
then
    rm $system-lxc-*.lst
    exit
fi

if [[ $case == "cleanall" ]]
then
    rm -f $system-lxc-*.lst error-lxc.log $system*.dat $system*.orb $system*.coul $system*.exch
    exit
fi


if [[ $case == "hf" && $system == "be" ]]
then
    card[1]=$title 
    card[2]="method hf"
    card[3]=$nuclei
    card[4]="config 0"
    card[5]="2 sigma  end"
    card[6]=$grid
    card[7]="orbpot lda 2"
    card[8]="scf 2000 10 12 14 3"
    card[9]=$omega
    card[10]=$fixnan
    card[11]=stop                    
    maxCards=11
    genInputData > $system-hf.data
fi



if [[ $case == "hf" && $system == "fh" ]]
then
    card[1]="$title FH (HF)" 
    card[2]="method hf"
    card[3]=$nuclei
    card[4]="config 0"
    card[5]="1 pi"
    card[6]="3 sigma  end"
    card[7]=$grid
    card[8]="orbpot lda 2"
    card[9]="scf 20000 10 7 14 3"
    card[10]=$omega
    card[11]=stop                    
    maxCards=13
    genInputData > $system-hf.data
fi

if [[ $case == "hf" ]]
then
    [[ -e $system-hf.lst && $force == yes ]] && rm -f $system-hf.lst     
    [[ -e $system-hf.lst ]] && echo "$system-hf.lst exists ... use -f option to continue ... " && exit

   if [[ $verbose == yes ]]
   then 
       xhf $system-hf  $system-hf 
   else
       xhf $system-hf  $system-hf  > $system-hf.lst &
   fi
   exit
fi


if [[ $case == "info" ]]
then
    [[ -n $2 ]] && $X2DHF_DIRECTORY/bin/xc-info $2 && exit

    for kind in $kinds
    do
	lxcFuncs=$(grep -Pi "^#define\s+XC\_${kind}" $X2DHF_DIRECTORY/libxc/include/xc_funcs.h | gawk '{print $2}')
	for lxcFunc in $lxcFuncs
	do
	    echo -e "::::::::::: $lxcFunc ::::::::::::::::::::::::::::::::::::::::::::::::::\n"	    
	    $X2DHF_DIRECTORY/bin/xc-info $lxcFunc
	    echo ""
	done
    done
    exit
fi

if [[ $case == "list" ]]
then
    for kind in $kinds
    do
	lxcFuncs=$(grep -Pi "^#define\s+XC\_${kind}" $X2DHF_DIRECTORY/libxc/include/xc_funcs.h | gawk '{print $2}')
	for lxcFunc in $lxcFuncs
	do
	    echo $lxcFunc
	done
    done
    exit
fi

if [[ $case == "status"  || $case == "tail" ]]
then
    [[ -e $system-hf.lst ]] && tail -$n $(ls -t *.lst | head -1) 
    exit
fi

if [[ $case == "stop" ]]
then
    xhf stop 
    exit
fi

if [[ $case == "tests" ]]
then
    echo -e "\n$(echo "${system^}"): contributions to total HF energy for DFT functionals:\n" 
    for lxcFunc in $lxcFuncs4SelTests
    do
	prepInputData
	execLXCFunc
	returnCode=$?
	[[ $verbose == yes && $returnCode != 0 ]] && echo "execLXCFunc: returnCode=$returnCode"
    done

    for lxcFunc in $lxcFuncs4tests
    do
	prepInputData
	execLXCFunc
	returnCode=$?
	[[ $verbose == yes && $returnCode != 0 ]] && echo "execLXCFunc: returnCode=$returnCode"
    done
fi

if [[ $case == "dft" ]]
then
    shift
    
    if [[ $system == "be" ]]
    then
        lxcFunc=$1
	card[1]=$title 
	card[2]="method hf"
	card[3]="dft $lxcFunc"
	card[4]=$nuclei
	card[5]="config 0"
	card[6]="2 sigma  end"
	card[7]=$grid
	card[8]="orbpot old"
	card[9]="scf $maxscf 10 5 14 3"
	card[10]=$omega
	card[11]=$fixnan
	card[12]=
	card[13]=stop
	maxCards=13
    fi    
    
    if [[ $system == "fh" ]]
    then
        lxcFunc=$1
	card[1]=$title 
	card[2]="method hf"
	card[3]="dft $lxcFunc"
	card[4]=$nuclei
	card[5]="config 0"
	card[6]="1 pi"                                                                            
	card[7]="3 sigma  end"
	card[8]=$grid
	card[9]="orbpot old"
	card[10]="scf $maxscf 10 10 14 3"
	card[11]=$fixnan
	card[12]=stop
	maxCards=12
    fi

    genInputData > $system-lxc-cont.data

    [[ -e $system-lxc-cont-$1.lst && $force == yes ]] && rm -f $system-lxc-cont-$1.lst     
    [[ -e $system-lxc-cont-$1.lst ]] && echo "$system-lxc-cont-$1.lst exists ... use -f option to continue ... " && exit

    if [[ $verbose == yes ]]
    then
	xhf $system-lxc-cont  $system-1 $system-2  
    else
	xhf $system-lxc-cont  $system-1 $system-2  > $system-lxc-cont-$1.lst &
    fi
    exit
fi


regex=^xc_
case=$(echo "$case" | tr '[:upper:]' '[:lower:]')

if [[ $case =~ $regex ]]
then
    while (( $# > 0 ))
    do
	case=$(echo "$1" | tr '[:upper:]' '[:lower:]')
	lxcFunc=$case
	prepInputData
	execLXCFunc
	returnCode=$?
	[[ $verbose == yes && $returnCode != 0 ]] && echo "execLXCFunc returned with returnCode=$returnCode"
	shift
    done
else
    lxcFuncs=$(grep -Pi "^#define\s+XC\_${case}" $X2DHF_DIRECTORY/libxc//include/xc_funcs.h | gawk '{print $2}')

    echo -e "\n$(echo "${system^}"): contributions to total HF energy for DFT functionals:\n" 

    for lxcFunc in $lxcFuncs
    do
	prepInputData
	execLXCFunc
	returnCode=$?
	[[ $verbose == yes && $returnCode != 0 ]] && echo "execLXCFunc returned with returnCode=$returnCode"
    done
fi

